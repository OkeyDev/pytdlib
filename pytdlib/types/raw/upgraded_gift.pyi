from .message_sender import MessageSender
from .object_base import ObjectBase
from .upgraded_gift_backdrop import UpgradedGiftBackdrop
from .upgraded_gift_model import UpgradedGiftModel
from .upgraded_gift_original_details import UpgradedGiftOriginalDetails
from .upgraded_gift_symbol import UpgradedGiftSymbol

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class UpgradedGift(ObjectBase):
    """
    Describes an upgraded gift that can be transferred to another owner or transferred to the TON blockchain as an NFT

    :param id: Unique identifier of the gift
    :param title: The title of the upgraded gift
    :param name: Unique name of the upgraded gift that can be used with internalLinkTypeUpgradedGift or sendResoldGift
    :param number: Unique number of the upgraded gift among gifts upgraded from the same gift
    :param total_upgraded_count: Total number of gifts that were upgraded from the same gift
    :param max_upgraded_count: The maximum number of gifts that can be upgraded from the same gift
    :param owner_id: Identifier of the user or the chat that owns the upgraded gift; may be null if none or unknown
    :param owner_address: Address of the gift NFT owner in TON blockchain; may be empty if none. Append the address to getOption("ton_blockchain_explorer_url") to get a link with information about the address
    :param owner_name: Name of the owner for the case when owner identifier and address aren't known
    :param gift_address: Address of the gift NFT in TON blockchain; may be empty if none. Append the address to getOption("ton_blockchain_explorer_url") to get a link with information about the address
    :param model: Model of the upgraded gift
    :param symbol: Symbol of the upgraded gift
    :param backdrop: Backdrop of the upgraded gift
    :param original_details: Information about the originally sent gift; may be null if unknown
    :param resale_star_count: Number of Telegram Stars that must be paid to buy the gift and send it to someone else; 0 if resale isn't possible
    """
    __slots__ = ("id", "title", "name", "number", "total_upgraded_count", "max_upgraded_count", "owner_id", "owner_address", "owner_name", "gift_address", "model", "symbol", "backdrop", "original_details", "resale_star_count", "_extra", "_client_id", "_type")

    def __init__(self, id: int = 0, title: str = "", name: str = "", number: int = 0, total_upgraded_count: int = 0, max_upgraded_count: int = 0, owner_id: MessageSender | None = None, owner_address: str = "", owner_name: str = "", gift_address: str = "", model: UpgradedGiftModel | None = None, symbol: UpgradedGiftSymbol | None = None, backdrop: UpgradedGiftBackdrop | None = None, original_details: UpgradedGiftOriginalDetails | None = None, resale_star_count: int = 0):
        self.id = id
        self.title = title
        self.name = name
        self.number = number
        self.total_upgraded_count = total_upgraded_count
        self.max_upgraded_count = max_upgraded_count
        self.owner_id = owner_id
        self.owner_address = owner_address
        self.owner_name = owner_name
        self.gift_address = gift_address
        self.model = model
        self.symbol = symbol
        self.backdrop = backdrop
        self.original_details = original_details
        self.resale_star_count = resale_star_count
        self._type = "upgradedGift"