from .object_base import ObjectBase
from .star_giveaway_winner_option import StarGiveawayWinnerOption
from typing import List

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class StarGiveawayPaymentOption(ObjectBase):
    """
    Describes an option for creating of Telegram Star giveaway. Use telegramPaymentPurposeStarGiveaway for out-of-store payments

    :param currency: ISO 4217 currency code for the payment
    :param amount: The amount to pay, in the smallest units of the currency
    :param star_count: Number of Telegram Stars that will be distributed among winners
    :param store_product_id: Identifier of the store product associated with the option; may be empty if none
    :param yearly_boost_count: Number of times the chat will be boosted for one year if the option is chosen
    :param winner_options: Allowed options for the number of giveaway winners
    :param is_default: True, if the option must be chosen by default
    :param is_additional: True, if the option must be shown only in the full list of payment options
    """
    __slots__ = ("currency", "amount", "star_count", "store_product_id", "yearly_boost_count", "winner_options", "is_default", "is_additional", "_extra", "_client_id", "_type")

    def __init__(self, currency: str = "", amount: int = 0, star_count: int = 0, store_product_id: str = "", yearly_boost_count: int = 0, winner_options: List[StarGiveawayWinnerOption] | None = None, is_default: bool = False, is_additional: bool = False):
        self.currency = currency
        self.amount = amount
        self.star_count = star_count
        self.store_product_id = store_product_id
        self.yearly_boost_count = yearly_boost_count
        self.winner_options = winner_options
        self.is_default = is_default
        self.is_additional = is_additional
        self._type = "starGiveawayPaymentOption"