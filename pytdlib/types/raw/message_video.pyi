from .alternative_video import AlternativeVideo
from .formatted_text import FormattedText
from .message_content import MessageContent
from .photo import Photo
from .video import Video
from typing import List

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class MessageVideo(MessageContent):
    """
    A video message

    :param video: The video description
    :param alternative_videos: Alternative qualities of the video
    :param cover: Cover of the video; may be null if none
    :param start_timestamp: Timestamp from which the video playing must start, in seconds
    :param caption: Video caption
    :param show_caption_above_media: True, if the caption must be shown above the video; otherwise, the caption must be shown below the video
    :param has_spoiler: True, if the video preview must be covered by a spoiler animation
    :param is_secret: True, if the video thumbnail must be blurred and the video must be shown only while tapped
    """
    __slots__ = ("video", "alternative_videos", "cover", "start_timestamp", "caption", "show_caption_above_media", "has_spoiler", "is_secret", "_extra", "_client_id", "_type")

    def __init__(self, video: Video | None = None, alternative_videos: List[AlternativeVideo] | None = None, cover: Photo | None = None, start_timestamp: int = 0, caption: FormattedText | None = None, show_caption_above_media: bool = False, has_spoiler: bool = False, is_secret: bool = False):
        self.video = video
        self.alternative_videos = alternative_videos
        self.cover = cover
        self.start_timestamp = start_timestamp
        self.caption = caption
        self.show_caption_above_media = show_caption_above_media
        self.has_spoiler = has_spoiler
        self.is_secret = is_secret
        self._type = "messageVideo"