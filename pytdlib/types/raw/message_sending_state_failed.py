from .message_sending_state import MessageSendingState

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class MessageSendingStateFailed(MessageSendingState):
    """
    The message failed to be sent

    :param error: The cause of the message sending failure
    :param can_retry: True, if the message can be re-sent using resendMessages or readdQuickReplyShortcutMessages
    :param need_another_sender: True, if the message can be re-sent only on behalf of a different sender
    :param need_another_reply_quote: True, if the message can be re-sent only if another quote is chosen in the message that is replied by the given message
    :param need_drop_reply: True, if the message can be re-sent only if the message to be replied is removed. This will be done automatically by resendMessages
    :param required_paid_message_star_count: The number of Telegram Stars that must be paid to send the message; 0 if the current amount is correct
    :param retry_after: Time left before the message can be re-sent, in seconds. No update is sent when this field changes
    """
    __slots__ = ("error", "can_retry", "need_another_sender", "need_another_reply_quote", "need_drop_reply", "required_paid_message_star_count", "retry_after", "_extra", "_client_id", "_type")

    def __init__(self, error = None, can_retry = None, need_another_sender = None, need_another_reply_quote = None, need_drop_reply = None, required_paid_message_star_count = None, retry_after = None):
        self.error = error
        self.can_retry = can_retry
        self.need_another_sender = need_another_sender
        self.need_another_reply_quote = need_another_reply_quote
        self.need_drop_reply = need_drop_reply
        self.required_paid_message_star_count = required_paid_message_star_count
        self.retry_after = retry_after
        self._type = "messageSendingStateFailed"