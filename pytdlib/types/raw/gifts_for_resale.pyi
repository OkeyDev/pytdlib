from .gift_for_resale import GiftForResale
from .object_base import ObjectBase
from .upgraded_gift_backdrop_count import UpgradedGiftBackdropCount
from .upgraded_gift_model_count import UpgradedGiftModelCount
from .upgraded_gift_symbol_count import UpgradedGiftSymbolCount
from typing import List

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class GiftsForResale(ObjectBase):
    """
    Describes gifts available for resale

    :param total_count: Total number of gifts found
    :param gifts: The gifts
    :param models: Available models; for searchGiftsForResale requests without offset and attributes only
    :param symbols: Available symbols; for searchGiftsForResale requests without offset and attributes only
    :param backdrops: Available backdrops; for searchGiftsForResale requests without offset and attributes only
    :param next_offset: The offset for the next request. If empty, then there are no more results
    """
    __slots__ = ("total_count", "gifts", "models", "symbols", "backdrops", "next_offset", "_extra", "_client_id", "_type")

    def __init__(self, total_count: int = 0, gifts: List[GiftForResale] | None = None, models: List[UpgradedGiftModelCount] | None = None, symbols: List[UpgradedGiftSymbolCount] | None = None, backdrops: List[UpgradedGiftBackdropCount] | None = None, next_offset: str = ""):
        self.total_count = total_count
        self.gifts = gifts
        self.models = models
        self.symbols = symbols
        self.backdrops = backdrops
        self.next_offset = next_offset
        self._type = "giftsForResale"