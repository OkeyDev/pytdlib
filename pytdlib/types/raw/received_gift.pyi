from .formatted_text import FormattedText
from .message_sender import MessageSender
from .object_base import ObjectBase
from .sent_gift import SentGift

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class ReceivedGift(ObjectBase):
    """
    Represents a gift received by a user or a chat

    :param received_gift_id: Unique identifier of the received gift for the current user; only for the receiver of the gift
    :param sender_id: Identifier of a user or a chat that sent the gift; may be null if unknown
    :param text: Message added to the gift
    :param is_private: True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone are able to see them
    :param is_saved: True, if the gift is displayed on the chat's profile page; only for the receiver of the gift
    :param is_pinned: True, if the gift is pinned to the top of the chat's profile page
    :param can_be_upgraded: True, if the gift is a regular gift that can be upgraded to a unique gift; only for the receiver of the gift
    :param can_be_transferred: True, if the gift is an upgraded gift that can be transferred to another owner; only for the receiver of the gift
    :param was_refunded: True, if the gift was refunded and isn't available anymore
    :param date: Point in time (Unix timestamp) when the gift was sent
    :param gift: The gift
    :param sell_star_count: Number of Telegram Stars that can be claimed by the receiver instead of the regular gift; 0 if the gift can't be sold by the current user
    :param prepaid_upgrade_star_count: Number of Telegram Stars that were paid by the sender for the ability to upgrade the gift
    :param transfer_star_count: Number of Telegram Stars that must be paid to transfer the upgraded gift; only for the receiver of the gift
    :param next_transfer_date: Point in time (Unix timestamp) when the gift can be transferred to another owner; 0 if the gift can be transferred immediately or transfer isn't possible; only for the receiver of the gift
    :param next_resale_date: Point in time (Unix timestamp) when the gift can be resold to another user; 0 if the gift can't be resold; only for the receiver of the gift
    :param export_date: Point in time (Unix timestamp) when the upgraded gift can be transferred to the TON blockchain as an NFT; 0 if NFT export isn't possible; only for the receiver of the gift
    """
    __slots__ = ("received_gift_id", "sender_id", "text", "is_private", "is_saved", "is_pinned", "can_be_upgraded", "can_be_transferred", "was_refunded", "date", "gift", "sell_star_count", "prepaid_upgrade_star_count", "transfer_star_count", "next_transfer_date", "next_resale_date", "export_date", "_extra", "_client_id", "_type")

    def __init__(self, received_gift_id: str = "", sender_id: MessageSender | None = None, text: FormattedText | None = None, is_private: bool = False, is_saved: bool = False, is_pinned: bool = False, can_be_upgraded: bool = False, can_be_transferred: bool = False, was_refunded: bool = False, date: int = 0, gift: SentGift | None = None, sell_star_count: int = 0, prepaid_upgrade_star_count: int = 0, transfer_star_count: int = 0, next_transfer_date: int = 0, next_resale_date: int = 0, export_date: int = 0):
        self.received_gift_id = received_gift_id
        self.sender_id = sender_id
        self.text = text
        self.is_private = is_private
        self.is_saved = is_saved
        self.is_pinned = is_pinned
        self.can_be_upgraded = can_be_upgraded
        self.can_be_transferred = can_be_transferred
        self.was_refunded = was_refunded
        self.date = date
        self.gift = gift
        self.sell_star_count = sell_star_count
        self.prepaid_upgrade_star_count = prepaid_upgrade_star_count
        self.transfer_star_count = transfer_star_count
        self.next_transfer_date = next_transfer_date
        self.next_resale_date = next_resale_date
        self.export_date = export_date
        self._type = "receivedGift"