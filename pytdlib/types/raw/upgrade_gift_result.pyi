from .object_base import ObjectBase
from .upgraded_gift import UpgradedGift

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class UpgradeGiftResult(ObjectBase):
    """
    Contains result of gift upgrading

    :param gift: The upgraded gift
    :param received_gift_id: Unique identifier of the received gift for the current user
    :param is_saved: True, if the gift is displayed on the user's or the channel's profile page
    :param can_be_transferred: True, if the gift can be transferred to another owner
    :param transfer_star_count: Number of Telegram Stars that must be paid to transfer the upgraded gift
    :param next_transfer_date: Point in time (Unix timestamp) when the gift can be transferred to another owner; 0 if the gift can be transferred immediately or transfer isn't possible
    :param next_resale_date: Point in time (Unix timestamp) when the gift can be resold to another user; 0 if the gift can't be resold; only for the receiver of the gift
    :param export_date: Point in time (Unix timestamp) when the gift can be transferred to the TON blockchain as an NFT
    """
    __slots__ = ("gift", "received_gift_id", "is_saved", "can_be_transferred", "transfer_star_count", "next_transfer_date", "next_resale_date", "export_date", "_extra", "_client_id", "_type")

    def __init__(self, gift: UpgradedGift | None = None, received_gift_id: str = "", is_saved: bool = False, can_be_transferred: bool = False, transfer_star_count: int = 0, next_transfer_date: int = 0, next_resale_date: int = 0, export_date: int = 0):
        self.gift = gift
        self.received_gift_id = received_gift_id
        self.is_saved = is_saved
        self.can_be_transferred = can_be_transferred
        self.transfer_star_count = transfer_star_count
        self.next_transfer_date = next_transfer_date
        self.next_resale_date = next_resale_date
        self.export_date = export_date
        self._type = "upgradeGiftResult"