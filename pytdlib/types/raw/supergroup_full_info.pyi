from .bot_commands import BotCommands
from .bot_verification import BotVerification
from .chat_invite_link import ChatInviteLink
from .chat_location import ChatLocation
from .chat_photo import ChatPhoto
from .object_base import ObjectBase
from typing import List

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class SupergroupFullInfo(ObjectBase):
    """
    Contains full information about a supergroup or channel

    :param photo: Chat photo; may be null if empty or unknown. If non-null, then it is the same photo as in chat.photo
    :param description: Contains full information about a supergroup or channel
    :param member_count: Number of members in the supergroup or channel; 0 if unknown
    :param administrator_count: Number of privileged users in the supergroup or channel; 0 if unknown
    :param restricted_count: Number of restricted users in the supergroup; 0 if unknown
    :param banned_count: Number of users banned from chat; 0 if unknown
    :param linked_chat_id: Chat identifier of a discussion group for the channel, or a channel, for which the supergroup is the designated discussion group; 0 if none or unknown
    :param direct_messages_chat_id: Chat identifier of a direct messages group for the channel, or a channel, for which the supergroup is the designated direct messages group; 0 if none
    :param slow_mode_delay: Delay between consecutive sent messages for non-administrator supergroup members, in seconds
    :param slow_mode_delay_expires_in: Time left before next message can be sent in the supergroup, in seconds. An updateSupergroupFullInfo update is not triggered when value of this field changes, but both new and old values are non-zero
    :param can_enable_paid_messages: True, if paid messages can be enabled in the supergroup chat; for supergroup only
    :param can_enable_paid_reaction: True, if paid reaction can be enabled in the channel chat; for channels only
    :param can_get_members: True, if members of the chat can be retrieved via getSupergroupMembers or searchChatMembers
    :param has_hidden_members: True, if non-administrators can receive only administrators and bots using getSupergroupMembers or searchChatMembers
    :param can_hide_members: True, if non-administrators and non-bots can be hidden in responses to getSupergroupMembers and searchChatMembers for non-administrators
    :param can_set_sticker_set: True, if the supergroup sticker set can be changed
    :param can_set_location: True, if the supergroup location can be changed
    :param can_get_statistics: True, if the supergroup or channel statistics are available
    :param can_get_revenue_statistics: True, if the supergroup or channel revenue statistics are available
    :param can_get_star_revenue_statistics: True, if the supergroup or channel Telegram Star revenue statistics are available
    :param can_send_gift: True, if the user can send a gift to the supergroup or channel using sendGift or transferGift
    :param can_toggle_aggressive_anti_spam: True, if aggressive anti-spam checks can be enabled or disabled in the supergroup
    :param is_all_history_available: True, if new chat members will have access to old messages. In public, discussion, of forum groups and all channels, old messages are always available, so this option affects only private non-forum supergroups without a linked chat. The value of this field is only available to chat administrators
    :param can_have_sponsored_messages: True, if the chat can have sponsored messages. The value of this field is only available to the owner of the chat
    :param has_aggressive_anti_spam_enabled: True, if aggressive anti-spam checks are enabled in the supergroup. The value of this field is only available to chat administrators
    :param has_paid_media_allowed: True, if paid media can be sent and forwarded to the channel chat; for channels only
    :param has_pinned_stories: True, if the supergroup or channel has pinned stories
    :param gift_count: Number of saved to profile gifts for channels without can_post_messages administrator right, otherwise, the total number of received gifts
    :param my_boost_count: Number of times the current user boosted the supergroup or channel
    :param unrestrict_boost_count: Number of times the supergroup must be boosted by a user to ignore slow mode and chat permission restrictions; 0 if unspecified
    :param sticker_set_id: Identifier of the supergroup sticker set that must be shown before user sticker sets; 0 if none
    :param custom_emoji_sticker_set_id: Identifier of the custom emoji sticker set that can be used in the supergroup without Telegram Premium subscription; 0 if none
    :param location: Location to which the supergroup is connected; may be null if none
    :param invite_link: Primary invite link for the chat; may be null. For chat administrators with can_invite_users right only
    :param bot_commands: List of commands of bots in the group
    :param bot_verification: Information about verification status of the supergroup or the channel provided by a bot; may be null if none or unknown
    :param upgraded_from_basic_group_id: Identifier of the basic group from which supergroup was upgraded; 0 if none
    :param upgraded_from_max_message_id: Identifier of the last message in the basic group from which supergroup was upgraded; 0 if none
    """
    __slots__ = ("photo", "description", "member_count", "administrator_count", "restricted_count", "banned_count", "linked_chat_id", "direct_messages_chat_id", "slow_mode_delay", "slow_mode_delay_expires_in", "can_enable_paid_messages", "can_enable_paid_reaction", "can_get_members", "has_hidden_members", "can_hide_members", "can_set_sticker_set", "can_set_location", "can_get_statistics", "can_get_revenue_statistics", "can_get_star_revenue_statistics", "can_send_gift", "can_toggle_aggressive_anti_spam", "is_all_history_available", "can_have_sponsored_messages", "has_aggressive_anti_spam_enabled", "has_paid_media_allowed", "has_pinned_stories", "gift_count", "my_boost_count", "unrestrict_boost_count", "sticker_set_id", "custom_emoji_sticker_set_id", "location", "invite_link", "bot_commands", "bot_verification", "upgraded_from_basic_group_id", "upgraded_from_max_message_id", "_extra", "_client_id", "_type")

    def __init__(self, photo: ChatPhoto | None = None, description: str = "", member_count: int = 0, administrator_count: int = 0, restricted_count: int = 0, banned_count: int = 0, linked_chat_id: int = 0, direct_messages_chat_id: int = 0, slow_mode_delay: int = 0, slow_mode_delay_expires_in: float = 0, can_enable_paid_messages: bool = False, can_enable_paid_reaction: bool = False, can_get_members: bool = False, has_hidden_members: bool = False, can_hide_members: bool = False, can_set_sticker_set: bool = False, can_set_location: bool = False, can_get_statistics: bool = False, can_get_revenue_statistics: bool = False, can_get_star_revenue_statistics: bool = False, can_send_gift: bool = False, can_toggle_aggressive_anti_spam: bool = False, is_all_history_available: bool = False, can_have_sponsored_messages: bool = False, has_aggressive_anti_spam_enabled: bool = False, has_paid_media_allowed: bool = False, has_pinned_stories: bool = False, gift_count: int = 0, my_boost_count: int = 0, unrestrict_boost_count: int = 0, sticker_set_id: int = 0, custom_emoji_sticker_set_id: int = 0, location: ChatLocation | None = None, invite_link: ChatInviteLink | None = None, bot_commands: List[BotCommands] | None = None, bot_verification: BotVerification | None = None, upgraded_from_basic_group_id: int = 0, upgraded_from_max_message_id: int = 0):
        self.photo = photo
        self.description = description
        self.member_count = member_count
        self.administrator_count = administrator_count
        self.restricted_count = restricted_count
        self.banned_count = banned_count
        self.linked_chat_id = linked_chat_id
        self.direct_messages_chat_id = direct_messages_chat_id
        self.slow_mode_delay = slow_mode_delay
        self.slow_mode_delay_expires_in = slow_mode_delay_expires_in
        self.can_enable_paid_messages = can_enable_paid_messages
        self.can_enable_paid_reaction = can_enable_paid_reaction
        self.can_get_members = can_get_members
        self.has_hidden_members = has_hidden_members
        self.can_hide_members = can_hide_members
        self.can_set_sticker_set = can_set_sticker_set
        self.can_set_location = can_set_location
        self.can_get_statistics = can_get_statistics
        self.can_get_revenue_statistics = can_get_revenue_statistics
        self.can_get_star_revenue_statistics = can_get_star_revenue_statistics
        self.can_send_gift = can_send_gift
        self.can_toggle_aggressive_anti_spam = can_toggle_aggressive_anti_spam
        self.is_all_history_available = is_all_history_available
        self.can_have_sponsored_messages = can_have_sponsored_messages
        self.has_aggressive_anti_spam_enabled = has_aggressive_anti_spam_enabled
        self.has_paid_media_allowed = has_paid_media_allowed
        self.has_pinned_stories = has_pinned_stories
        self.gift_count = gift_count
        self.my_boost_count = my_boost_count
        self.unrestrict_boost_count = unrestrict_boost_count
        self.sticker_set_id = sticker_set_id
        self.custom_emoji_sticker_set_id = custom_emoji_sticker_set_id
        self.location = location
        self.invite_link = invite_link
        self.bot_commands = bot_commands
        self.bot_verification = bot_verification
        self.upgraded_from_basic_group_id = upgraded_from_basic_group_id
        self.upgraded_from_max_message_id = upgraded_from_max_message_id
        self._type = "supergroupFullInfo"