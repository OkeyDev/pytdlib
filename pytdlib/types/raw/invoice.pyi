from .labeled_price_part import LabeledPricePart
from .object_base import ObjectBase
from typing import List

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class Invoice(ObjectBase):
    """
    Product invoice

    :param currency: ISO 4217 currency code
    :param price_parts: A list of objects used to calculate the total price of the product
    :param subscription_period: The number of seconds between consecutive Telegram Star debiting for subscription invoices; 0 if the invoice doesn't create subscription
    :param max_tip_amount: The maximum allowed amount of tip in the smallest units of the currency
    :param suggested_tip_amounts: Suggested amounts of tip in the smallest units of the currency
    :param recurring_payment_terms_of_service_url: An HTTP URL with terms of service for recurring payments. If non-empty, the invoice payment will result in recurring payments and the user must accept the terms of service before allowed to pay
    :param terms_of_service_url: An HTTP URL with terms of service for non-recurring payments. If non-empty, then the user must accept the terms of service before allowed to pay
    :param is_test: True, if the payment is a test payment
    :param need_name: True, if the user's name is needed for payment
    :param need_phone_number: True, if the user's phone number is needed for payment
    :param need_email_address: True, if the user's email address is needed for payment
    :param need_shipping_address: True, if the user's shipping address is needed for payment
    :param send_phone_number_to_provider: True, if the user's phone number will be sent to the provider
    :param send_email_address_to_provider: True, if the user's email address will be sent to the provider
    :param is_flexible: True, if the total price depends on the shipping method
    """
    __slots__ = ("currency", "price_parts", "subscription_period", "max_tip_amount", "suggested_tip_amounts", "recurring_payment_terms_of_service_url", "terms_of_service_url", "is_test", "need_name", "need_phone_number", "need_email_address", "need_shipping_address", "send_phone_number_to_provider", "send_email_address_to_provider", "is_flexible", "_extra", "_client_id", "_type")

    def __init__(self, currency: str = "", price_parts: List[LabeledPricePart] | None = None, subscription_period: int = 0, max_tip_amount: int = 0, suggested_tip_amounts: List[int] | None = None, recurring_payment_terms_of_service_url: str = "", terms_of_service_url: str = "", is_test: bool = False, need_name: bool = False, need_phone_number: bool = False, need_email_address: bool = False, need_shipping_address: bool = False, send_phone_number_to_provider: bool = False, send_email_address_to_provider: bool = False, is_flexible: bool = False):
        self.currency = currency
        self.price_parts = price_parts
        self.subscription_period = subscription_period
        self.max_tip_amount = max_tip_amount
        self.suggested_tip_amounts = suggested_tip_amounts
        self.recurring_payment_terms_of_service_url = recurring_payment_terms_of_service_url
        self.terms_of_service_url = terms_of_service_url
        self.is_test = is_test
        self.need_name = need_name
        self.need_phone_number = need_phone_number
        self.need_email_address = need_email_address
        self.need_shipping_address = need_shipping_address
        self.send_phone_number_to_provider = send_phone_number_to_provider
        self.send_email_address_to_provider = send_email_address_to_provider
        self.is_flexible = is_flexible
        self._type = "invoice"