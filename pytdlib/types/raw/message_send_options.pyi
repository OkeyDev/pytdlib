from .message_scheduling_state import MessageSchedulingState
from .object_base import ObjectBase

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class MessageSendOptions(ObjectBase):
    """
    Options to be used when a message is sent

    :param direct_messages_chat_topic_id: Unique identifier of the topic in a channel direct messages chat administered by the current user; pass 0 if the chat isn't a channel direct messages chat administered by the current user
    :param disable_notification: Pass true to disable notification for the message
    :param from_background: Pass true if the message is sent from the background
    :param protect_content: Pass true if the content of the message must be protected from forwarding and saving; for bots only
    :param allow_paid_broadcast: Pass true to allow the message to ignore regular broadcast limits for a small fee; for bots only
    :param paid_message_star_count: The number of Telegram Stars the user agreed to pay to send the messages
    :param update_order_of_installed_sticker_sets: Pass true if the user explicitly chosen a sticker or a custom emoji from an installed sticker set; applicable only to sendMessage and sendMessageAlbum
    :param scheduling_state: Message scheduling state; pass null to send message immediately. Messages sent to a secret chat, to a chat with paid messages, to a channel direct messages chat, live location messages and self-destructing messages can't be scheduled
    :param effect_id: Identifier of the effect to apply to the message; pass 0 if none; applicable only to sendMessage and sendMessageAlbum in private chats
    :param sending_id: Non-persistent identifier, which will be returned back in messageSendingStatePending object and can be used to match sent messages and corresponding updateNewMessage updates
    :param only_preview: Pass true to get a fake message instead of actually sending them
    """
    __slots__ = ("direct_messages_chat_topic_id", "disable_notification", "from_background", "protect_content", "allow_paid_broadcast", "paid_message_star_count", "update_order_of_installed_sticker_sets", "scheduling_state", "effect_id", "sending_id", "only_preview", "_extra", "_client_id", "_type")

    def __init__(self, direct_messages_chat_topic_id: int = 0, disable_notification: bool = False, from_background: bool = False, protect_content: bool = False, allow_paid_broadcast: bool = False, paid_message_star_count: int = 0, update_order_of_installed_sticker_sets: bool = False, scheduling_state: MessageSchedulingState | None = None, effect_id: int = 0, sending_id: int = 0, only_preview: bool = False):
        self.direct_messages_chat_topic_id = direct_messages_chat_topic_id
        self.disable_notification = disable_notification
        self.from_background = from_background
        self.protect_content = protect_content
        self.allow_paid_broadcast = allow_paid_broadcast
        self.paid_message_star_count = paid_message_star_count
        self.update_order_of_installed_sticker_sets = update_order_of_installed_sticker_sets
        self.scheduling_state = scheduling_state
        self.effect_id = effect_id
        self.sending_id = sending_id
        self.only_preview = only_preview
        self._type = "messageSendOptions"