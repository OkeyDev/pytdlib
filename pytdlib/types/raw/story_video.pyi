from .file import File
from .minithumbnail import Minithumbnail
from .object_base import ObjectBase
from .thumbnail import Thumbnail

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class StoryVideo(ObjectBase):
    """
    Describes a video file posted as a story

    :param duration: Duration of the video, in seconds
    :param width: Video width
    :param height: Video height
    :param has_stickers: True, if stickers were added to the video. The list of corresponding sticker sets can be received using getAttachedStickerSets
    :param is_animation: True, if the video has no sound
    :param minithumbnail: Video minithumbnail; may be null
    :param thumbnail: Video thumbnail in JPEG or MPEG4 format; may be null
    :param preload_prefix_size: Size of file prefix, which is expected to be preloaded, in bytes
    :param cover_frame_timestamp: Timestamp of the frame used as video thumbnail
    :param video: File containing the video
    """
    __slots__ = ("duration", "width", "height", "has_stickers", "is_animation", "minithumbnail", "thumbnail", "preload_prefix_size", "cover_frame_timestamp", "video", "_extra", "_client_id", "_type")

    def __init__(self, duration: float = 0, width: int = 0, height: int = 0, has_stickers: bool = False, is_animation: bool = False, minithumbnail: Minithumbnail | None = None, thumbnail: Thumbnail | None = None, preload_prefix_size: int = 0, cover_frame_timestamp: float = 0, video: File | None = None):
        self.duration = duration
        self.width = width
        self.height = height
        self.has_stickers = has_stickers
        self.is_animation = is_animation
        self.minithumbnail = minithumbnail
        self.thumbnail = thumbnail
        self.preload_prefix_size = preload_prefix_size
        self.cover_frame_timestamp = cover_frame_timestamp
        self.video = video
        self._type = "storyVideo"