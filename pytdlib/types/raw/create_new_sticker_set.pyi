from .function import Function

from .input_sticker import InputSticker
from .sticker_set import StickerSet
from .sticker_type import StickerType
from typing import List

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class CreateNewStickerSet(Function[StickerSet]):
    """
    Creates a new sticker set. Returns the newly created sticker set

    :param user_id: Sticker set owner; ignored for regular users
    :param title: Sticker set title; 1-64 characters
    :param name: Sticker set name. Can contain only English letters, digits and underscores. Must end with *"_by_<bot username>"* (*<bot_username>* is case insensitive) for bots; 0-64 characters. If empty, then the name returned by getSuggestedStickerSetName will be used automatically
    :param sticker_type: Type of the stickers in the set
    :param needs_repainting: Pass true if stickers in the sticker set must be repainted; for custom emoji sticker sets only
    :param stickers: List of stickers to be added to the set; 1-200 stickers for custom emoji sticker sets, and 1-120 stickers otherwise. For TGS stickers, uploadStickerFile must be used before the sticker is shown
    :param source: Source of the sticker set; may be empty if unknown
    :return: :class:`StickerSet`
    """
    __slots__ = ("user_id", "title", "name", "sticker_type", "needs_repainting", "stickers", "source", "_extra", "_client_id", "_type")

    def __init__(self, user_id: int = 0, title: str = "", name: str = "", sticker_type: StickerType | None = None, needs_repainting: bool = False, stickers: List[InputSticker] | None = None, source: str = ""):
        self.user_id = user_id
        self.title = title
        self.name = name
        self.sticker_type = sticker_type
        self.needs_repainting = needs_repainting
        self.stickers = stickers
        self.source = source
        self._type = "createNewStickerSet"