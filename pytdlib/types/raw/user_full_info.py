from .object_base import ObjectBase

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class UserFullInfo(ObjectBase):
    """
    Contains full information about a user

    :param personal_photo: User profile photo set by the current user for the contact; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown. If non-null, then it is the same photo as in user.profile_photo and chat.photo. This photo isn't returned in the list of user photos
    :param photo: User profile photo; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown. If non-null and personal_photo is null, then it is the same photo as in user.profile_photo and chat.photo
    :param public_photo: User profile photo visible if the main photo is hidden by privacy settings; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown. If non-null and both photo and personal_photo are null, then it is the same photo as in user.profile_photo and chat.photo. This photo isn't returned in the list of user photos
    :param block_list: Block list to which the user is added; may be null if none
    :param can_be_called: True, if the user can be called
    :param supports_video_calls: True, if a video call can be created with the user
    :param has_private_calls: True, if the user can't be called due to their privacy settings
    :param has_private_forwards: True, if the user can't be linked in forwarded messages due to their privacy settings
    :param has_restricted_voice_and_video_note_messages: True, if voice and video notes can't be sent or forwarded to the user
    :param has_posted_to_profile_stories: True, if the user has posted to profile stories
    :param has_sponsored_messages_enabled: True, if the user always enabled sponsored messages; known only for the current user
    :param need_phone_number_privacy_exception: True, if the current user needs to explicitly allow to share their phone number with the user when the method addContact is used
    :param set_chat_background: True, if the user set chat background for both chat users and it wasn't reverted yet
    :param bio: A short user bio; may be null for bots
    :param birthdate: Birthdate of the user; may be null if unknown
    :param personal_chat_id: Identifier of the personal chat of the user; 0 if none
    :param gift_count: Number of saved to profile gifts for other users or the total number of received gifts for the current user
    :param group_in_common_count: Number of group chats where both the other user and the current user are a member; 0 for the current user
    :param incoming_paid_message_star_count: Number of Telegram Stars that must be paid by the user for each sent message to the current user
    :param outgoing_paid_message_star_count: Number of Telegram Stars that must be paid by the current user for each sent message to the user
    :param gift_settings: Settings for gift receiving for the user
    :param bot_verification: Information about verification status of the user provided by a bot; may be null if none or unknown
    :param business_info: Information about business settings for Telegram Business accounts; may be null if none
    :param bot_info: For bots, information about the bot; may be null if the user isn't a bot
    """
    __slots__ = ("personal_photo", "photo", "public_photo", "block_list", "can_be_called", "supports_video_calls", "has_private_calls", "has_private_forwards", "has_restricted_voice_and_video_note_messages", "has_posted_to_profile_stories", "has_sponsored_messages_enabled", "need_phone_number_privacy_exception", "set_chat_background", "bio", "birthdate", "personal_chat_id", "gift_count", "group_in_common_count", "incoming_paid_message_star_count", "outgoing_paid_message_star_count", "gift_settings", "bot_verification", "business_info", "bot_info", "_extra", "_client_id", "_type")

    def __init__(self, personal_photo = None, photo = None, public_photo = None, block_list = None, can_be_called = None, supports_video_calls = None, has_private_calls = None, has_private_forwards = None, has_restricted_voice_and_video_note_messages = None, has_posted_to_profile_stories = None, has_sponsored_messages_enabled = None, need_phone_number_privacy_exception = None, set_chat_background = None, bio = None, birthdate = None, personal_chat_id = None, gift_count = None, group_in_common_count = None, incoming_paid_message_star_count = None, outgoing_paid_message_star_count = None, gift_settings = None, bot_verification = None, business_info = None, bot_info = None):
        self.personal_photo = personal_photo
        self.photo = photo
        self.public_photo = public_photo
        self.block_list = block_list
        self.can_be_called = can_be_called
        self.supports_video_calls = supports_video_calls
        self.has_private_calls = has_private_calls
        self.has_private_forwards = has_private_forwards
        self.has_restricted_voice_and_video_note_messages = has_restricted_voice_and_video_note_messages
        self.has_posted_to_profile_stories = has_posted_to_profile_stories
        self.has_sponsored_messages_enabled = has_sponsored_messages_enabled
        self.need_phone_number_privacy_exception = need_phone_number_privacy_exception
        self.set_chat_background = set_chat_background
        self.bio = bio
        self.birthdate = birthdate
        self.personal_chat_id = personal_chat_id
        self.gift_count = gift_count
        self.group_in_common_count = group_in_common_count
        self.incoming_paid_message_star_count = incoming_paid_message_star_count
        self.outgoing_paid_message_star_count = outgoing_paid_message_star_count
        self.gift_settings = gift_settings
        self.bot_verification = bot_verification
        self.business_info = business_info
        self.bot_info = bot_info
        self._type = "userFullInfo"