from .object_base import ObjectBase

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class Message(ObjectBase):
    """
    Describes a message

    :param id: Message identifier; unique for the chat to which the message belongs
    :param sender_id: Identifier of the sender of the message
    :param chat_id: Chat identifier
    :param sending_state: The sending state of the message; may be null if the message isn't being sent and didn't fail to be sent
    :param scheduling_state: The scheduling state of the message; may be null if the message isn't scheduled
    :param is_outgoing: True, if the message is outgoing
    :param is_pinned: True, if the message is pinned
    :param is_from_offline: True, if the message was sent because of a scheduled action by the message sender, for example, as away, or greeting service message
    :param can_be_saved: True, if content of the message can be saved locally
    :param has_timestamped_media: True, if media timestamp entities refers to a media in this message as opposed to a media in the replied message
    :param is_channel_post: True, if the message is a channel post. All messages to channels are channel posts, all other messages are not channel posts
    :param contains_unread_mention: True, if the message contains an unread mention for the current user
    :param date: Point in time (Unix timestamp) when the message was sent; 0 for scheduled messages
    :param edit_date: Point in time (Unix timestamp) when the message was last edited; 0 for scheduled messages
    :param forward_info: Information about the initial message sender; may be null if none or unknown
    :param import_info: Information about the initial message for messages created with importMessages; may be null if the message isn't imported
    :param interaction_info: Information about interactions with the message; may be null if none
    :param unread_reactions: Information about unread reactions added to the message
    :param fact_check: Information about fact-check added to the message; may be null if none
    :param reply_to: Information about the message or the story this message is replying to; may be null if none
    :param message_thread_id: If non-zero, the identifier of the message thread the message belongs to; unique within the chat to which the message belongs
    :param topic_id: Identifier of the topic within the chat to which the message belongs; may be null if none
    :param self_destruct_type: The message's self-destruct type; may be null if none
    :param self_destruct_in: Time left before the message self-destruct timer expires, in seconds; 0 if self-destruction isn't scheduled yet
    :param auto_delete_in: Time left before the message will be automatically deleted by message_auto_delete_time setting of the chat, in seconds; 0 if never
    :param via_bot_user_id: If non-zero, the user identifier of the inline bot through which this message was sent
    :param sender_business_bot_user_id: If non-zero, the user identifier of the business bot that sent this message
    :param sender_boost_count: Number of times the sender of the message boosted the supergroup at the time the message was sent; 0 if none or unknown. For messages sent by the current user, supergroupFullInfo.my_boost_count must be used instead
    :param paid_message_star_count: The number of Telegram Stars the sender paid to send the message
    :param author_signature: For channel posts and anonymous group messages, optional author signature
    :param media_album_id: Unique identifier of an album this message belongs to; 0 if none. Only audios, documents, photos and videos can be grouped together in albums
    :param effect_id: Unique identifier of the effect added to the message; 0 if none
    :param has_sensitive_content: True, if media content of the message must be hidden with 18+ spoiler
    :param restriction_reason: If non-empty, contains a human-readable description of the reason why access to this message must be restricted
    :param content: Content of the message
    :param reply_markup: Reply markup for the message; may be null if none
    """
    __slots__ = ("id", "sender_id", "chat_id", "sending_state", "scheduling_state", "is_outgoing", "is_pinned", "is_from_offline", "can_be_saved", "has_timestamped_media", "is_channel_post", "contains_unread_mention", "date", "edit_date", "forward_info", "import_info", "interaction_info", "unread_reactions", "fact_check", "reply_to", "message_thread_id", "topic_id", "self_destruct_type", "self_destruct_in", "auto_delete_in", "via_bot_user_id", "sender_business_bot_user_id", "sender_boost_count", "paid_message_star_count", "author_signature", "media_album_id", "effect_id", "has_sensitive_content", "restriction_reason", "content", "reply_markup", "_extra", "_client_id", "_type")

    def __init__(self, id = None, sender_id = None, chat_id = None, sending_state = None, scheduling_state = None, is_outgoing = None, is_pinned = None, is_from_offline = None, can_be_saved = None, has_timestamped_media = None, is_channel_post = None, contains_unread_mention = None, date = None, edit_date = None, forward_info = None, import_info = None, interaction_info = None, unread_reactions = None, fact_check = None, reply_to = None, message_thread_id = None, topic_id = None, self_destruct_type = None, self_destruct_in = None, auto_delete_in = None, via_bot_user_id = None, sender_business_bot_user_id = None, sender_boost_count = None, paid_message_star_count = None, author_signature = None, media_album_id = None, effect_id = None, has_sensitive_content = None, restriction_reason = None, content = None, reply_markup = None):
        self.id = id
        self.sender_id = sender_id
        self.chat_id = chat_id
        self.sending_state = sending_state
        self.scheduling_state = scheduling_state
        self.is_outgoing = is_outgoing
        self.is_pinned = is_pinned
        self.is_from_offline = is_from_offline
        self.can_be_saved = can_be_saved
        self.has_timestamped_media = has_timestamped_media
        self.is_channel_post = is_channel_post
        self.contains_unread_mention = contains_unread_mention
        self.date = date
        self.edit_date = edit_date
        self.forward_info = forward_info
        self.import_info = import_info
        self.interaction_info = interaction_info
        self.unread_reactions = unread_reactions
        self.fact_check = fact_check
        self.reply_to = reply_to
        self.message_thread_id = message_thread_id
        self.topic_id = topic_id
        self.self_destruct_type = self_destruct_type
        self.self_destruct_in = self_destruct_in
        self.auto_delete_in = auto_delete_in
        self.via_bot_user_id = via_bot_user_id
        self.sender_business_bot_user_id = sender_business_bot_user_id
        self.sender_boost_count = sender_boost_count
        self.paid_message_star_count = paid_message_star_count
        self.author_signature = author_signature
        self.media_album_id = media_album_id
        self.effect_id = effect_id
        self.has_sensitive_content = has_sensitive_content
        self.restriction_reason = restriction_reason
        self.content = content
        self.reply_markup = reply_markup
        self._type = "message"