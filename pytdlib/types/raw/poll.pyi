from .formatted_text import FormattedText
from .message_sender import MessageSender
from .object_base import ObjectBase
from .poll_option import PollOption
from .poll_type import PollType
from typing import List

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class Poll(ObjectBase):
    """
    Describes a poll

    :param id: Unique poll identifier
    :param question: Poll question; 1-300 characters. Only custom emoji entities are allowed
    :param options: List of poll answer options
    :param total_voter_count: Total number of voters, participating in the poll
    :param recent_voter_ids: Identifiers of recent voters, if the poll is non-anonymous
    :param is_anonymous: True, if the poll is anonymous
    :param type: Type of the poll
    :param open_period: Amount of time the poll will be active after creation, in seconds
    :param close_date: Point in time (Unix timestamp) when the poll will automatically be closed
    :param is_closed: True, if the poll is closed
    """
    __slots__ = ("id", "question", "options", "total_voter_count", "recent_voter_ids", "is_anonymous", "type", "open_period", "close_date", "is_closed", "_extra", "_client_id", "_type")

    def __init__(self, id: int = 0, question: FormattedText | None = None, options: List[PollOption] | None = None, total_voter_count: int = 0, recent_voter_ids: List[MessageSender] | None = None, is_anonymous: bool = False, type: PollType | None = None, open_period: int = 0, close_date: int = 0, is_closed: bool = False):
        self.id = id
        self.question = question
        self.options = options
        self.total_voter_count = total_voter_count
        self.recent_voter_ids = recent_voter_ids
        self.is_anonymous = is_anonymous
        self.type = type
        self.open_period = open_period
        self.close_date = close_date
        self.is_closed = is_closed
        self._type = "poll"