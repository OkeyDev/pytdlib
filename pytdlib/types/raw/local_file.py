from .object_base import ObjectBase

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class LocalFile(ObjectBase):
    """
    Represents a local file

    :param path: Local path to the locally available file part; may be empty
    :param can_be_downloaded: True, if it is possible to download or generate the file
    :param can_be_deleted: True, if the file can be deleted
    :param is_downloading_active: True, if the file is currently being downloaded (or a local copy is being generated by some other means)
    :param is_downloading_completed: True, if the local copy is fully available
    :param download_offset: Download will be started from this offset. downloaded_prefix_size is calculated from this offset
    :param downloaded_prefix_size: If is_downloading_completed is false, then only some prefix of the file starting from download_offset is ready to be read. downloaded_prefix_size is the size of that prefix in bytes
    :param downloaded_size: Total downloaded file size, in bytes. Can be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage
    """
    __slots__ = ("path", "can_be_downloaded", "can_be_deleted", "is_downloading_active", "is_downloading_completed", "download_offset", "downloaded_prefix_size", "downloaded_size", "_extra", "_client_id", "_type")

    def __init__(self, path = None, can_be_downloaded = None, can_be_deleted = None, is_downloading_active = None, is_downloading_completed = None, download_offset = None, downloaded_prefix_size = None, downloaded_size = None):
        self.path = path
        self.can_be_downloaded = can_be_downloaded
        self.can_be_deleted = can_be_deleted
        self.is_downloading_active = is_downloading_active
        self.is_downloading_completed = is_downloading_completed
        self.download_offset = download_offset
        self.downloaded_prefix_size = downloaded_prefix_size
        self.downloaded_size = downloaded_size
        self._type = "localFile"