from .call_protocol import CallProtocol
from .call_server import CallServer
from .call_state import CallState
from typing import List

### FILE IS AUTOGENERATED. DO NO EDIT IT BY HAND ###

class CallStateReady(CallState):
    """
    The call is ready to use

    :param protocol: Call protocols supported by the other call participant
    :param servers: List of available call servers
    :param config: A JSON-encoded call config
    :param encryption_key: Call encryption key
    :param emojis: Encryption key fingerprint represented as 4 emoji
    :param allow_p2p: True, if peer-to-peer connection is allowed by users privacy settings
    :param is_group_call_supported: True, if the other party supports upgrading of the call to a group call
    :param custom_parameters: Custom JSON-encoded call parameters to be passed to tgcalls
    """
    __slots__ = ("protocol", "servers", "config", "encryption_key", "emojis", "allow_p2p", "is_group_call_supported", "custom_parameters", "_extra", "_client_id", "_type")

    def __init__(self, protocol: CallProtocol | None = None, servers: List[CallServer] | None = None, config: str = "", encryption_key: bytes = b"", emojis: List[str] | None = None, allow_p2p: bool = False, is_group_call_supported: bool = False, custom_parameters: str = ""):
        self.protocol = protocol
        self.servers = servers
        self.config = config
        self.encryption_key = encryption_key
        self.emojis = emojis
        self.allow_p2p = allow_p2p
        self.is_group_call_supported = is_group_call_supported
        self.custom_parameters = custom_parameters
        self._type = "callStateReady"